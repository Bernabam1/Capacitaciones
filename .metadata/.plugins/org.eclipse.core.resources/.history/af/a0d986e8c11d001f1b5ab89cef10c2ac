package com.berna.springboot.jpa;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.transaction.annotation.Transactional;

import com.berna.springboot.jpa.entities.Address;
import com.berna.springboot.jpa.entities.Client;
import com.berna.springboot.jpa.entities.ClientDetails;
import com.berna.springboot.jpa.entities.Invoice;
import com.berna.springboot.jpa.repositories.ClientDetailsRepository;
import com.berna.springboot.jpa.repositories.ClientRepository;
import com.berna.springboot.jpa.repositories.InvoiceRepository;

@SpringBootApplication
public class SpringbootJpaRelationshipsApplication implements CommandLineRunner {

	@Autowired
	private ClientRepository clientRepository;
	@Autowired
	private InvoiceRepository invoiceRepository;
	@Autowired
	private ClientDetailsRepository clientDetailsRepository;

	public static void main(String[] args) {
		SpringApplication.run(SpringbootJpaRelationshipsApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {

		oneToOneFindById();

	}

	@Transactional
	public void oneToOneFindById() {
		ClientDetails clientDetails = new ClientDetails(true, 5000);
		clientDetailsRepository.save(clientDetails);

		Optional<Client> clientOptional = clientRepository.findById(2L);
		clientOptional.ifPresent(client -> {
			client.setClientDetails(clientDetails);
			clientRepository.save(client);

			System.out.println(client);
		});
	}

	@Transactional
	public void oneToOne() {
		ClientDetails clientDetails = new ClientDetails(true, 5000);
		clientDetailsRepository.save(clientDetails);

		Client client = new Client("OneTo", "One");
		client.setClientDetails(clientDetails);
		clientRepository.save(client);

		System.out.println(client);
	}

	@Transactional
	public void removeInvoiceBidireccionalFindByID() {
		Optional<Client> optionalClient = clientRepository.findOne(1L);
		optionalClient.ifPresent(client -> {

			Invoice invoice1 = new Invoice("Compras de oficina", 200L);
			Invoice invoice2 = new Invoice("Compras de super", 500L);

			client.addInvoice(invoice1);
			client.addInvoice(invoice2);

			clientRepository.save(client);
			System.out.println(client);
		});

		Optional<Client> optionalClientDb = clientRepository.findOne(1L);
		optionalClientDb.ifPresent(client -> {
			Optional<Invoice> invoiceOptional = invoiceRepository.findById(2L); // factura q se elimina
			invoiceOptional.ifPresent(invoice -> {
				client.getInvoices().remove(invoice);
				invoice.setClient(null); // Es clave eliminar en ambos sentidos

				clientRepository.save(client);
				System.out.println(client);
			});
		});
	}

	@Transactional
	public void oneToManyInvoiceBidireccionalFindByID() {
		Optional<Client> optionalClient = clientRepository.findOneWithInvoices(1L);
		optionalClient.ifPresent(client -> {

			Invoice invoice1 = new Invoice("Compras de oficina", 200L);
			Invoice invoice2 = new Invoice("Compras de super", 500L);

			client.addInvoice(invoice1);
			client.addInvoice(invoice2);

			clientRepository.save(client);
			System.out.println(client);
		});
	}

	@Transactional
	public void oneToManyBidireccional() {
		Client client = new Client("Jean Luc", "Picard");

		Invoice invoice1 = new Invoice("Compras de oficina", 200L);
		Invoice invoice2 = new Invoice("Compras de super", 500L);

		client.addInvoice(invoice1);
		client.addInvoice(invoice2);

		clientRepository.save(client);
		System.out.println(client);
	}

	@Transactional
	public void removeAddress() {
		Client client = new Client("Jean Luc", "Picard");

		Address address1 = new Address("Pellegrini", 1559);
		Address address2 = new Address("Liniers", 846);

		client.getAddresses().add(address1);
		client.getAddresses().add(address2);

		clientRepository.save(client);
		System.out.println(client);

		Optional<Client> optClient = clientRepository.findOneWithAdresses(3L);
		optClient.ifPresent(c -> {
			c.getAddresses().remove(address1);
			clientRepository.save(c);
			System.out.println(c);
			// Para esto hay q redifinir el equals en address para q pueda comparar las
			// direcciones
			// spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true - el findOne
			// soluciona esto
		});
	}

	@Transactional
	public void removeAddressFindById() { // Este no se porque no anda
		Optional<Client> optionalClient = clientRepository.findById(2L);
		optionalClient.ifPresent(client -> {
			Address address1 = new Address("Pellegrini", 1559);
			Address address2 = new Address("Liniers", 846);

			Set<Address> addresses = new HashSet<>();
			addresses.add(address1);
			addresses.add(address2);
			client.setAddresses(addresses);

			clientRepository.save(client);
			System.out.println(client);

			Optional<Client> optionalClient2 = clientRepository.findOneWithAdresses(2L);
			optionalClient2.ifPresent(c -> {
				c.getAddresses().remove(address2);
				clientRepository.save(c);
				System.out.println(c);
				// Para esto hay q redifinir el equals en address para q pueda comparar las
				// direcciones
				// spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true - el findOne
				// soluciona esto
			});
		});
	}

	@Transactional
	public void oneToMany() {
		Client client = new Client("Jean Luc", "Picard");

		Address address1 = new Address("Pellegrini", 1559);
		Address address2 = new Address("Liniers", 846);

		client.getAddresses().add(address1);
		client.getAddresses().add(address2);

		clientRepository.save(client);
		System.out.println(client);

		// Las tablas quedan desacopladas pero se crea una tabla nueva
		// clients_addresses tiene addresses_id, client_id
	}

	@Transactional
	public void oneToManyFindClientById() {
		Optional<Client> optClient = clientRepository.findById(2L);
		optClient.ifPresent(client -> {
			Address address1 = new Address("Pellegrini", 1559);
			Address address2 = new Address("Liniers", 846);

			Set<Address> addresses = new HashSet<>();
			addresses.add(address1);
			addresses.add(address2);
			client.setAddresses(addresses);

			clientRepository.save(client);
			System.out.println(client);
		});
	}

	@Transactional
	public void manyToOne() {
		Client client = new Client("John", "Doe");
		clientRepository.save(client);

		Invoice invoice = new Invoice("Compras de oficina", 2000L);
		invoice.setClient(client);
		Invoice invoiceDB = invoiceRepository.save(invoice);
		System.out.println(invoiceDB);
	}

	@Transactional
	public void manyToOneFindClientById() { // busco el cliente en vez de crearlo
		Optional<Client> optClient = clientRepository.findById(1L);

		if (optClient.isPresent()) {
			Client client = optClient.orElseThrow();

			Invoice invoice = new Invoice("Compras de oficina", 2000L);
			invoice.setClient(client);
			Invoice invoiceDB = invoiceRepository.save(invoice);
			System.out.println(invoiceDB);
		}

	}

}
