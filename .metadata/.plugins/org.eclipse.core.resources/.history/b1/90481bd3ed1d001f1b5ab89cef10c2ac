package com.berna.springboot.app.crud.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.berna.springboot.app.crud.entities.Product;
import com.berna.springboot.app.crud.services.ProductService;

@RestController
@RequestMapping("/api/products")
public class ProductController {
	
	@Autowired
	private ProductService service;
	
	@GetMapping // Si no pongo nada va ir a la ruta por defecto
	public List<Product> list(){
		return service.findAll();
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<?> view(@PathVariable Long id) { // Devuelvo un RespEntity porque puede venir un error por ej
		//Validaci칩n:
		Optional<Product> productOpt = service.findById(id);
		if (productOpt.isPresent()) {
			return ResponseEntity.ok(productOpt.orElseThrow());// Si esta presente lo devuelvo en el cuerpo de la respuesta
		}
		return ResponseEntity.notFound().build(); //Si no est치, esto devuelve 404
	}
	
	@PostMapping
	public ResponseEntity<Product> create(@RequestBody Product product){
		//Product productNew = service.save(product);
		return ResponseEntity.status(HttpStatus.CREATED).body(service.save(product));
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<Product> update(@PathVariable Long id, @RequestBody Product product){
		Optional<Product> productOpt = service.update(id, product);
		if(productOpt.isPresent()) {
			return ResponseEntity.status(HttpStatus.CREATED).body();
		}
		return ResponseEntity.notFound().build();;
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<?> delete(@PathVariable Long id) { // Devuelvo un RespEntity porque puede venir un error por ej
		//Validaci칩n:
		Optional<Product> productOpt = service.delete(id);
		if (productOpt.isPresent()) {
			return ResponseEntity.ok(productOpt.orElseThrow());// Si esta presente lo devuelvo en el cuerpo de la respuesta
		}
		return ResponseEntity.notFound().build(); //Si no est치, esto devuelve 404
	}
}
